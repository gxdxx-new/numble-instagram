name: Java CI with Gradle & Deploy to EC2

# main 브런치에 push가 되면 아래의 flow가 실행
on:
  push:
    branches:
      - main

# flow에서 사용할 변수
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: aws-gd-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: aws-gd-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: aws-gd-codedeploy-deployment-group

jobs:
  build:
    runs-on: ubuntu-latest

    # 아래의 flow들이 차례대로 실행
    steps:

      # 1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2) JDK 17 셋팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - uses : actions/checkout@v3
      # 3) application.yml 설정
      # application.yml은 외부에 노출되면 안되므로 Actions가 빌드될때마다 해당 Repository의 Secret 설정을
      # 이용해 설정 파일을 생성
      - run : touch ./src/main/resources/application.yml
      - run : echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
      - run : cat ./src/main/resources/application.yml

      # 4) gradlew 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5) gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 6) AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 7) AWS S3에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # 8) AWS EC2에 배포
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
